// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: release.proto

package de.deutschepost.pi.mlservices.protobuf;

/**
 * <pre>
 * Initiates the liveness check and sets the reference image
 * (which should be an image of an id document with a portrait image)
 * </pre>
 *
 * Protobuf type {@code websocket.FvLcSetReferenceCommandMessage}
 */
public  final class FvLcSetReferenceCommandMessage extends
    com.google.protobuf.GeneratedMessageLite<
        FvLcSetReferenceCommandMessage, FvLcSetReferenceCommandMessage.Builder> implements
    // @@protoc_insertion_point(message_implements:websocket.FvLcSetReferenceCommandMessage)
    FvLcSetReferenceCommandMessageOrBuilder {
  private FvLcSetReferenceCommandMessage() {
    caseId_ = "";
    referenceImage_ = com.google.protobuf.ByteString.EMPTY;
  }
  public static final int CASE_ID_FIELD_NUMBER = 1;
  private String caseId_;
  /**
   * <pre>
   * id of the case of this ident
   * </pre>
   *
   * <code>string case_id = 1;</code>
   * @return The caseId.
   */
  @Override
  public String getCaseId() {
    return caseId_;
  }
  /**
   * <pre>
   * id of the case of this ident
   * </pre>
   *
   * <code>string case_id = 1;</code>
   * @return The bytes for caseId.
   */
  @Override
  public com.google.protobuf.ByteString
      getCaseIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(caseId_);
  }
  /**
   * <pre>
   * id of the case of this ident
   * </pre>
   *
   * <code>string case_id = 1;</code>
   * @param value The caseId to set.
   */
  private void setCaseId(
      String value) {
    Class<?> valueClass = value.getClass();
  
    caseId_ = value;
  }
  /**
   * <pre>
   * id of the case of this ident
   * </pre>
   *
   * <code>string case_id = 1;</code>
   */
  private void clearCaseId() {
    
    caseId_ = getDefaultInstance().getCaseId();
  }
  /**
   * <pre>
   * id of the case of this ident
   * </pre>
   *
   * <code>string case_id = 1;</code>
   * @param value The bytes for caseId to set.
   */
  private void setCaseIdBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    caseId_ = value.toStringUtf8();
    
  }

  public static final int IDENT_ID_FIELD_NUMBER = 2;
  private long identId_;
  /**
   * <pre>
   * id of the ident
   * </pre>
   *
   * <code>sfixed64 ident_id = 2;</code>
   * @return The identId.
   */
  @Override
  public long getIdentId() {
    return identId_;
  }
  /**
   * <pre>
   * id of the ident
   * </pre>
   *
   * <code>sfixed64 ident_id = 2;</code>
   * @param value The identId to set.
   */
  private void setIdentId(long value) {
    
    identId_ = value;
  }
  /**
   * <pre>
   * id of the ident
   * </pre>
   *
   * <code>sfixed64 ident_id = 2;</code>
   */
  private void clearIdentId() {
    
    identId_ = 0L;
  }

  public static final int ATTEMPT_ID_FIELD_NUMBER = 3;
  private long attemptId_;
  /**
   * <pre>
   * id of the attempt
   * </pre>
   *
   * <code>sfixed64 attempt_id = 3;</code>
   * @return The attemptId.
   */
  @Override
  public long getAttemptId() {
    return attemptId_;
  }
  /**
   * <pre>
   * id of the attempt
   * </pre>
   *
   * <code>sfixed64 attempt_id = 3;</code>
   * @param value The attemptId to set.
   */
  private void setAttemptId(long value) {
    
    attemptId_ = value;
  }
  /**
   * <pre>
   * id of the attempt
   * </pre>
   *
   * <code>sfixed64 attempt_id = 3;</code>
   */
  private void clearAttemptId() {
    
    attemptId_ = 0L;
  }

  public static final int REFERENCE_IMAGE_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString referenceImage_;
  /**
   * <pre>
   * The raw bytes of a supported image type (jpg or png), must be smaller than the
   * overall image size limit
   * </pre>
   *
   * <code>bytes reference_image = 4;</code>
   * @return The referenceImage.
   */
  @Override
  public com.google.protobuf.ByteString getReferenceImage() {
    return referenceImage_;
  }
  /**
   * <pre>
   * The raw bytes of a supported image type (jpg or png), must be smaller than the
   * overall image size limit
   * </pre>
   *
   * <code>bytes reference_image = 4;</code>
   * @param value The referenceImage to set.
   */
  private void setReferenceImage(com.google.protobuf.ByteString value) {
    Class<?> valueClass = value.getClass();
  
    referenceImage_ = value;
  }
  /**
   * <pre>
   * The raw bytes of a supported image type (jpg or png), must be smaller than the
   * overall image size limit
   * </pre>
   *
   * <code>bytes reference_image = 4;</code>
   */
  private void clearReferenceImage() {
    
    referenceImage_ = getDefaultInstance().getReferenceImage();
  }

  public static final int REFERENCE_IMAGE_MEDIA_RECORD_ID_FIELD_NUMBER = 5;
  private long referenceImageMediaRecordId_;
  /**
   * <pre>
   * The id for the media record to store the reference image under
   * </pre>
   *
   * <code>int64 reference_image_media_record_id = 5;</code>
   * @return The referenceImageMediaRecordId.
   */
  @Override
  public long getReferenceImageMediaRecordId() {
    return referenceImageMediaRecordId_;
  }
  /**
   * <pre>
   * The id for the media record to store the reference image under
   * </pre>
   *
   * <code>int64 reference_image_media_record_id = 5;</code>
   * @param value The referenceImageMediaRecordId to set.
   */
  private void setReferenceImageMediaRecordId(long value) {
    
    referenceImageMediaRecordId_ = value;
  }
  /**
   * <pre>
   * The id for the media record to store the reference image under
   * </pre>
   *
   * <code>int64 reference_image_media_record_id = 5;</code>
   */
  private void clearReferenceImageMediaRecordId() {
    
    referenceImageMediaRecordId_ = 0L;
  }

  public static final int SEQUENCE_MEDIA_RECORD_ID_FIELD_NUMBER = 6;
  private long sequenceMediaRecordId_;
  /**
   * <pre>
   * The id for the media record to store the frame grabs / webRTC stream (later) under
   * </pre>
   *
   * <code>int64 sequence_media_record_id = 6;</code>
   * @return The sequenceMediaRecordId.
   */
  @Override
  public long getSequenceMediaRecordId() {
    return sequenceMediaRecordId_;
  }
  /**
   * <pre>
   * The id for the media record to store the frame grabs / webRTC stream (later) under
   * </pre>
   *
   * <code>int64 sequence_media_record_id = 6;</code>
   * @param value The sequenceMediaRecordId to set.
   */
  private void setSequenceMediaRecordId(long value) {
    
    sequenceMediaRecordId_ = value;
  }
  /**
   * <pre>
   * The id for the media record to store the frame grabs / webRTC stream (later) under
   * </pre>
   *
   * <code>int64 sequence_media_record_id = 6;</code>
   */
  private void clearSequenceMediaRecordId() {
    
    sequenceMediaRecordId_ = 0L;
  }

  public static FvLcSetReferenceCommandMessage parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static FvLcSetReferenceCommandMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static FvLcSetReferenceCommandMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static FvLcSetReferenceCommandMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(FvLcSetReferenceCommandMessage prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Initiates the liveness check and sets the reference image
   * (which should be an image of an id document with a portrait image)
   * </pre>
   *
   * Protobuf type {@code websocket.FvLcSetReferenceCommandMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        FvLcSetReferenceCommandMessage, Builder> implements
      // @@protoc_insertion_point(builder_implements:websocket.FvLcSetReferenceCommandMessage)
      FvLcSetReferenceCommandMessageOrBuilder {
    // Construct using de.deutschepost.pi.mlservices.protobuf.FvLcSetReferenceCommandMessage.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * id of the case of this ident
     * </pre>
     *
     * <code>string case_id = 1;</code>
     * @return The caseId.
     */
    @Override
    public String getCaseId() {
      return instance.getCaseId();
    }
    /**
     * <pre>
     * id of the case of this ident
     * </pre>
     *
     * <code>string case_id = 1;</code>
     * @return The bytes for caseId.
     */
    @Override
    public com.google.protobuf.ByteString
        getCaseIdBytes() {
      return instance.getCaseIdBytes();
    }
    /**
     * <pre>
     * id of the case of this ident
     * </pre>
     *
     * <code>string case_id = 1;</code>
     * @param value The caseId to set.
     * @return This builder for chaining.
     */
    public Builder setCaseId(
        String value) {
      copyOnWrite();
      instance.setCaseId(value);
      return this;
    }
    /**
     * <pre>
     * id of the case of this ident
     * </pre>
     *
     * <code>string case_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCaseId() {
      copyOnWrite();
      instance.clearCaseId();
      return this;
    }
    /**
     * <pre>
     * id of the case of this ident
     * </pre>
     *
     * <code>string case_id = 1;</code>
     * @param value The bytes for caseId to set.
     * @return This builder for chaining.
     */
    public Builder setCaseIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCaseIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * id of the ident
     * </pre>
     *
     * <code>sfixed64 ident_id = 2;</code>
     * @return The identId.
     */
    @Override
    public long getIdentId() {
      return instance.getIdentId();
    }
    /**
     * <pre>
     * id of the ident
     * </pre>
     *
     * <code>sfixed64 ident_id = 2;</code>
     * @param value The identId to set.
     * @return This builder for chaining.
     */
    public Builder setIdentId(long value) {
      copyOnWrite();
      instance.setIdentId(value);
      return this;
    }
    /**
     * <pre>
     * id of the ident
     * </pre>
     *
     * <code>sfixed64 ident_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearIdentId() {
      copyOnWrite();
      instance.clearIdentId();
      return this;
    }

    /**
     * <pre>
     * id of the attempt
     * </pre>
     *
     * <code>sfixed64 attempt_id = 3;</code>
     * @return The attemptId.
     */
    @Override
    public long getAttemptId() {
      return instance.getAttemptId();
    }
    /**
     * <pre>
     * id of the attempt
     * </pre>
     *
     * <code>sfixed64 attempt_id = 3;</code>
     * @param value The attemptId to set.
     * @return This builder for chaining.
     */
    public Builder setAttemptId(long value) {
      copyOnWrite();
      instance.setAttemptId(value);
      return this;
    }
    /**
     * <pre>
     * id of the attempt
     * </pre>
     *
     * <code>sfixed64 attempt_id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearAttemptId() {
      copyOnWrite();
      instance.clearAttemptId();
      return this;
    }

    /**
     * <pre>
     * The raw bytes of a supported image type (jpg or png), must be smaller than the
     * overall image size limit
     * </pre>
     *
     * <code>bytes reference_image = 4;</code>
     * @return The referenceImage.
     */
    @Override
    public com.google.protobuf.ByteString getReferenceImage() {
      return instance.getReferenceImage();
    }
    /**
     * <pre>
     * The raw bytes of a supported image type (jpg or png), must be smaller than the
     * overall image size limit
     * </pre>
     *
     * <code>bytes reference_image = 4;</code>
     * @param value The referenceImage to set.
     * @return This builder for chaining.
     */
    public Builder setReferenceImage(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setReferenceImage(value);
      return this;
    }
    /**
     * <pre>
     * The raw bytes of a supported image type (jpg or png), must be smaller than the
     * overall image size limit
     * </pre>
     *
     * <code>bytes reference_image = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearReferenceImage() {
      copyOnWrite();
      instance.clearReferenceImage();
      return this;
    }

    /**
     * <pre>
     * The id for the media record to store the reference image under
     * </pre>
     *
     * <code>int64 reference_image_media_record_id = 5;</code>
     * @return The referenceImageMediaRecordId.
     */
    @Override
    public long getReferenceImageMediaRecordId() {
      return instance.getReferenceImageMediaRecordId();
    }
    /**
     * <pre>
     * The id for the media record to store the reference image under
     * </pre>
     *
     * <code>int64 reference_image_media_record_id = 5;</code>
     * @param value The referenceImageMediaRecordId to set.
     * @return This builder for chaining.
     */
    public Builder setReferenceImageMediaRecordId(long value) {
      copyOnWrite();
      instance.setReferenceImageMediaRecordId(value);
      return this;
    }
    /**
     * <pre>
     * The id for the media record to store the reference image under
     * </pre>
     *
     * <code>int64 reference_image_media_record_id = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearReferenceImageMediaRecordId() {
      copyOnWrite();
      instance.clearReferenceImageMediaRecordId();
      return this;
    }

    /**
     * <pre>
     * The id for the media record to store the frame grabs / webRTC stream (later) under
     * </pre>
     *
     * <code>int64 sequence_media_record_id = 6;</code>
     * @return The sequenceMediaRecordId.
     */
    @Override
    public long getSequenceMediaRecordId() {
      return instance.getSequenceMediaRecordId();
    }
    /**
     * <pre>
     * The id for the media record to store the frame grabs / webRTC stream (later) under
     * </pre>
     *
     * <code>int64 sequence_media_record_id = 6;</code>
     * @param value The sequenceMediaRecordId to set.
     * @return This builder for chaining.
     */
    public Builder setSequenceMediaRecordId(long value) {
      copyOnWrite();
      instance.setSequenceMediaRecordId(value);
      return this;
    }
    /**
     * <pre>
     * The id for the media record to store the frame grabs / webRTC stream (later) under
     * </pre>
     *
     * <code>int64 sequence_media_record_id = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearSequenceMediaRecordId() {
      copyOnWrite();
      instance.clearSequenceMediaRecordId();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:websocket.FvLcSetReferenceCommandMessage)
  }
  @Override
  @SuppressWarnings({"unchecked", "fallthrough"})
  protected final Object dynamicMethod(
      MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new FvLcSetReferenceCommandMessage();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          Object[] objects = new Object[] {
            "caseId_",
            "identId_",
            "attemptId_",
            "referenceImage_",
            "referenceImageMediaRecordId_",
            "sequenceMediaRecordId_",
          };
          String info =
              "\u0000\u0006\u0000\u0000\u0001\u0006\u0006\u0000\u0000\u0000\u0001\u0208\u0002\u000e" +
              "\u0003\u000e\u0004\n\u0005\u0002\u0006\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<FvLcSetReferenceCommandMessage> parser = PARSER;
        if (parser == null) {
          synchronized (FvLcSetReferenceCommandMessage.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<FvLcSetReferenceCommandMessage>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:websocket.FvLcSetReferenceCommandMessage)
  private static final FvLcSetReferenceCommandMessage DEFAULT_INSTANCE;
  static {
    FvLcSetReferenceCommandMessage defaultInstance = new FvLcSetReferenceCommandMessage();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      FvLcSetReferenceCommandMessage.class, defaultInstance);
  }

  public static FvLcSetReferenceCommandMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<FvLcSetReferenceCommandMessage> PARSER;

  public static com.google.protobuf.Parser<FvLcSetReferenceCommandMessage> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}


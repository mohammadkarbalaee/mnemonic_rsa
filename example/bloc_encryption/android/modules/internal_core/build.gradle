apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    namespace 'de.post.ident.internal_core'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.moduleVersionCode
        versionName rootProject.moduleVersionName

        buildConfigField 'String', 'MODULE_VERSION_NAME', "\"${rootProject.moduleVersionName}\""
        buildConfigField 'int', 'MODULE_VERSION_CODE', "${rootProject.moduleVersionCode}"
        buildConfigField 'String', 'SDK_MODULE_VERSION', "\"${rootProject.sdkModuleVersionName}\""

        buildConfigField "boolean", "WEBVIEW_DEBUGGABLE", System.getenv('WEBVIEW_DEBUGGABLE') == "true" ? "true" : "false"


        consumerProguardFiles 'consumer-rules.pro'

        vectorDrawables.useSupportLibrary = true
        // for details see: https://medium.com/androiddevelopers/using-vector-assets-in-android-apps-4318fd662eb9
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    /*
    // Uncomment when we need to exclude code from be delivered into the external repository
    // Also you need to change in
    // publications {
    //    sdkPublicRelease(..) {
    //       from components.sdkPublicRelease
    flavorDimensions 'scope'

    productFlavors {
        sdkInternal {
            dimension 'scope'
        }
        sdkPublic {
            dimension 'scope'
        }
    }
    */
}

dependencies {
    implementation kotlin_std_lib
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version") {
        because "JSON moshi serialization of enums (EnumJsonAdapter)"
    }

    implementation "com.squareup.moshi:moshi:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    implementation "androidx.annotation:annotation:$androidXAnnotation"
    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "androidx.core:core-ktx:$androidXKtx"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidXKtxLifecycle"
    implementation "androidx.fragment:fragment-ktx:$androidXKtxFragment"
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:$androidXSwipeRefreshLayout") {
        because "Needed for the spinner animation of the buttons"
    }
    implementation "com.google.android.material:material:$material"
    implementation "com.scottyab:rootbeer-lib:$rootBeer"

    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:$camerax_view"

    implementation "com.google.android.play:core:$playCore"
    implementation "com.google.android.play:core-ktx:$playCoreKtx"
//    implementation('com.google.android.gms:play-services-basement') {
//        version {
//            strictly "$playServicesBasement"
//        }
//    }

    configurations.all {
        resolutionStrategy {
            force "com.google.android.gms:play-services-basement:$playServicesBasement"
        }
    }
}

apply from: '../maven.gradle'
